generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  email          String          @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  first_name     String?
  last_name      String?
  phone          String?
  hashedPassword String?
  role           String          @default("user")
  talentPool     TalentPool[]
  talentProfile  TalentProfile[]
  TalentMatch    TalentMatch[]
  accounts       Account[]
  sessions       Session[]
  otps           OTP[]
  cvs            CV[]
  credits        Int             @default(0)
  isRegistered   Boolean         @default(false)
  interviews     Interview[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  // posts            Modules[]
  // communityIds     String[]        @db.ObjectId
  // communities      Community[]     @relation(fields: [communityIds], references: [id])
  // seenMessageIds   String[]        @db.ObjectId
  // seenMessages     Message[]       @relation("Seen", fields: [seenMessageIds], references: [id])
  // messages         Message[]
  // sentmessages     Directmessage[] @relation("SenderUser")
  // receivedMessages Directmessage[] @relation("ReceiverUser")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// for recruiter
model TalentPool {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @db.ObjectId
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills           String[]
  profiles         String[]
  salary           String
  locationPref     String
  experienceNeeded String
  talents          TalentMatch[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model TalentMatch {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  talentId     String     @db.ObjectId
  talent       User       @relation(fields: [talentId], references: [id], onDelete: Cascade)
  talentPoolId String     @db.ObjectId
  talentPool   TalentPool @relation(fields: [talentPoolId], references: [id], onDelete: Cascade)
  isMatched    Boolean    @default(false)
  isHired      Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// for user
model TalentProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  resumeId        String   @db.ObjectId
  interviewId     String   @db.ObjectId
  skills          String[]
  profiles        String[]
  certifications  String[]
  expectedSalary  String
  locationPref    String
  experienceYears String
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CV {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  Resume         String
  JobDescription String
  userId         String?  @db.ObjectId
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Interview {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  cvText            String?
  jdText            String?
  audioUrl          String?
  videoUrl          String?
  User              User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String              @db.ObjectId
  messages          InterviewMessage[]
  isStarted         Boolean             @default(false)
  InterviewFeedback InterviewFeedback[]
  isCompleted       Boolean             @default(false)
  isFeedbackGiven   Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model InterviewMessage {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  interviewId String    @db.ObjectId
  type        String
  sender      String
  response    String
  code        String?
  createdAt   DateTime  @default(now())
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

model InterviewFeedback {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  feedback    String
  rating      Int
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  interviewId String    @db.ObjectId
  createdAt   DateTime  @default(now())
}

model NewsletterEmails {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Modules {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   Module_Name    String     @unique
//   No_of_Chapters String
//   No_of_Lessons  String
//   No_of_Weeks    String
//   No_of_Credits  String
//   Projects       String
//   author         User       @relation(fields: [authorId], references: [id])
//   authorId       String     @db.ObjectId
//   chapters       Chapters[]
// }

// model Chapters {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   Chapter_Name String
//   Lessons      String
//   chapter      Modules  @relation(fields: [chapterId], references: [id])
//   chapterId    String   @db.ObjectId
//   lessons      Lesson[]
// }

// model Lesson {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   Lesson_Name   String
//   lab           String?
//   content_url   String
//   video_url     String
//   Assesment_url String
//   chapter       Chapters @relation(fields: [chapterId], references: [id])
//   chapterId     String   @db.ObjectId
// }

// model Community {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt     DateTime  @default(now())
//   lastmessageAt DateTime  @default(now())
//   name          String    @unique
//   description   String?
//   isCommunity   Boolean?
//   comm_type     String
//   messagesIds   String?   @db.ObjectId
//   messages      Message[]
//   userIds       String[]  @db.ObjectId
//   users         User[]    @relation(fields: [userIds], references: [id])
// }

// model Message {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   content     String
//   type        String
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   seenIds     String[]  @db.ObjectId
//   seen        User[]    @relation("Seen", fields: [seenIds], references: [id])
//   communityId String    @db.ObjectId
//   community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
//   senderId    String    @db.ObjectId
//   sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
// }

// model Directmessage {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   content    String
//   createdAt  DateTime @default(now())
//   seen       Boolean?
//   receiverId String   @db.ObjectId
//   receiver   User     @relation("ReceiverUser", fields: [receiverId], references: [id], onDelete: Cascade)
//   senderId   String   @db.ObjectId
//   sender     User     @relation("SenderUser", fields: [senderId], references: [id], onDelete: Cascade)
// }

// model Blog {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   description String
//   authorName  String
//   position    String
//   sections    Section[]
//   image       String
// }

// model Section {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   blogId     String @db.ObjectId
//   subheading String
//   content    String
//   blog       Blog   @relation(fields: [blogId], references: [id])
// }
